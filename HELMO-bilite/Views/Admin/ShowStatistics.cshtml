@using System.Text.Json
@using System.Text.Json.Serialization
@model HELMO_bilite.Models.ViewModels.StatisticsViewModel

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://code.jquery.com/ui/1.13.0/jquery-ui.min.js"></script>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.13.0/themes/smoothness/jquery-ui.css">

<h1 class="fw-bold mt-5 ms-5">Statistiques</h1>

<div class="d-flex vw-100 h-100 justify-content-around">
    <div class="w-75 p-5">
        <h2 class="fw-bold mb-5">Clients</h2>

        <div class="d-flex mb-3">
            <input type="text" id="searchClient" class="me-2" placeholder="Nom de la compangie ...">
            <input id="searchStartDateClient" class="me-2" type="datetime-local" value="2000-01-01T00:00:00">
            <input id="searchEndDateClient" class="me-2" type="datetime-local">
            <button type="button" class="btn btn-warning fw-bold me-2" id="searchClientBtn">
                <i class="fas fa-search"></i>
                Rechercher
            </button>
        </div>
        
        <table class="table table-striped table-bordered border-5">
            <thead class="bg-warning">
                <tr>
                    <th scope="col"><i class="fa-solid fa-hashtag"></i> Numéro client</th>
                    <th scope="col"><i class="fa-solid fa-building"></i> Nom de la companie</th>
                    <th scope="col" id="nbrDeliveriesClient" style="cursor: pointer;"><i class="fa-solid fa-sort"></i>  Nombre de livraisons terminées liées</th>
                </tr>
            </thead>
            
            <tbody id="clientsStat">
            
            </tbody>
            
        </table>
    </div>

    <div class="w-75 p-5">
        <h2 class="fw-bold mb-5">Chauffeurs</h2>

        <div class="d-flex mb-3">
            <input type="text" id="searchTruckDriver" class="me-2" placeholder="Nom prénom ...">
            <input id="searchStartDateTruckDriver" class="me-2" type="datetime-local" value="2000-01-01T00:00:00">
            <input id="searchEndDateTruckDriver" class="me-2" type="datetime-local">
            <button type="button" class="btn btn-warning fw-bold me-2" id="searchTruckDriverBtn">
                <i class="fas fa-search"></i>
                Rechercher
            </button>
        </div>
            <table class="table table-striped table-bordered border-5">
                <thead class="bg-warning">
                <tr>
                    <th scope="col"><i class="fas fa-barcode"></i> Matricule</th>
                    <th scope="col"><i class="fas fa-user"></i> Nom</th>
                    <th scope="col"><i class="fas fa-user"></i> Prénom</th>
                    <th scope="col" id="nbrDeliveriesTruckDriver" style="cursor: pointer;"><i class="fa-solid fa-sort"></i> Nombre de livraisons terminées</th>
                </tr>
                </thead>

                <tbody id="truckDriversStat">


                </tbody>

            </table>
        </div>
</div>

@{
    var options = new JsonSerializerOptions()
    {
        ReferenceHandler = ReferenceHandler.Preserve
    };
    var clients = JsonSerializer.Serialize(Model.ClientStatistics, options);
    var truckDrivers = JsonSerializer.Serialize(Model.TruckDriversStatistics, options);
}

<script>
    // Récupération des éléments
    var clients = @Html.Raw(clients);
    var truckDrivers = @Html.Raw(truckDrivers);
    
    const tableClients = document.querySelector("#clientsStat");
    const tableTruckDrivers =  document.querySelector("#truckDriversStat");
    
    //TRI truckdrivers sur base du nombre de livraisons
    const thNbrDeliveriesTruckDriver = document.querySelector("#nbrDeliveriesTruckDriver");
    thNbrDeliveriesTruckDriver.addEventListener("click", sortTruckDriversByFinishedDeliveries);
    let isSortedTruckDrivers = false;
    
    //TRI clients sur base du nombre de livraisons
    const thNbrDeliveriesClients = document.querySelector("#nbrDeliveriesClient");
    thNbrDeliveriesClients.addEventListener("click", sortClientsByFinishedDeliveries);
    let isSortedClients = false;
    
    //Recherche CLIENTS
    const searchClient = document.getElementById("searchClient");
    const searchClientBtn = document.getElementById("searchClientBtn");
    
    searchClientBtn.addEventListener("click", function() {
      const searchTerm = searchClient.value;
      
      if (searchTerm.length === 0){
          displayAllClients(clients.$values)
      }else{
          const filteredClients = clients.$values.filter(client => client.Client.ClientCompany.CompanyName.includes(searchTerm));
          displayAllClients(filteredClients)
      }
      
    });
    
    //RECHERCHE TRUCKDRIVERS
    const searchTruckDriver = document.getElementById("searchTruckDriver");
    const searchTruckDriverBtn = document.getElementById("searchTruckDriverBtn");
    
    searchTruckDriverBtn.addEventListener("click", function() {
      const searchTerm = searchTruckDriver.value;
           
       if (searchTerm.length === 0){
               displayAllTruckDrivers(truckDrivers.$values)
        }else{
             const filteredTruckDrivers = truckDrivers.$values.filter(function(truckDriver) {
                         const fullName = truckDriver.TruckDriver.LastName + ' ' + truckDriver.TruckDriver.FirstName;
                         return fullName.toLowerCase().includes(searchTerm.toLowerCase());
                     });
         
            displayAllTruckDrivers(filteredTruckDrivers)
        }
       
    });
    
    
    //AUTOCOMPLETION POUR LE CLIENT
    var clientNames = [];
    clients.$values.forEach(function(client) {
        var companyName = client.Client.ClientCompany.CompanyName;
        clientNames.push(companyName);
    });
    
    // Activer l'autocomplétion pour les clients
    $('#searchClient').autocomplete({
        source: clientNames,
        minLength: 1 // Nombre minimum de caractères à taper avant de lancer la recherche
    });
    
    var truckDriversNames = [];
    truckDrivers.$values.forEach(function(truckDriver) {
        var truckDriverName = truckDriver.TruckDriver.LastName + ' ' + truckDriver.TruckDriver.FirstName;
        truckDriversNames.push(truckDriverName);
    });
    
    // Activer l'autocomplétion pour les truckDrivers
    $('#searchTruckDriver').autocomplete({
        source: truckDriversNames,
        minLength: 1 // Nombre minimum de caractères à taper avant de lancer la recherche
    });
    
   //GESTION DES DATES
    const searchStartDateClient = document.getElementById("searchStartDateClient");
    const searchEndDateClient = document.getElementById("searchEndDateClient");
       
    const searchStartDateTruckDriver = document.getElementById("searchStartDateTruckDriver");
    const searchEndDateTruckDriver = document.getElementById("searchEndDateTruckDriver");
     // Création d'un objet Date avec la date et l'heure courantes
     const now = new Date();
     
     // Formatage de la date au format ISO 8601 pour le champ datetime-local
     const isoDate = now.toISOString().slice(0, 16);
     
    searchEndDateClient.value = isoDate;
    searchEndDateTruckDriver.value = isoDate;
    

    
    
    //GESTION
    
    //Affichage des clients
    displayAllClients(clients.$values)
    
    
    //Affichage des truckDrivers
    displayAllTruckDrivers(truckDrivers.$values)

  
  
  //FONCTIONS
   function sortTruckDriversByFinishedDeliveries() {
          let sortedTruckDrivers = null;
                
          if (isSortedTruckDrivers){
              // Trie les chauffeurs de camion par nombre de livraisons terminées décroissant
             sortedTruckDrivers = truckDrivers.$values.sort((a, b) => a.finishedDeliveriesDate.$values.length - b.finishedDeliveriesDate.$values.length);
          }else{
             // Trie les chauffeurs de camion par nombre de livraisons terminées croissants
             sortedTruckDrivers = truckDrivers.$values.sort((a, b) => b.finishedDeliveriesDate.$values.length - a.finishedDeliveriesDate.$values.length);
          }
          
           isSortedTruckDrivers = !isSortedTruckDrivers;
          
           // Réaffiche les chauffeurs de camion triés
           displayAllTruckDrivers(sortedTruckDrivers)       
   }
   
  function sortClientsByFinishedDeliveries() {
          let sortedClients = null;
          
         if (isSortedClients){
              // Trie les chauffeurs de camion par nombre de livraisons terminées décroissant
                sortedClients = clients.$values.sort((a, b) => a.finishedDeliveriesDate.$values.length - b.finishedDeliveriesDate.$values.length);
         }else{
              // Trie les chauffeurs de camion par nombre de livraisons terminées croissants
                sortedClients = clients.$values.sort((a, b) => b.finishedDeliveriesDate.$values.length - a.finishedDeliveriesDate.$values.length);
         }
         
          isSortedClients = !isSortedClients;
          
          // Réaffiche les chauffeurs de camion triés
          displayAllClients(sortedClients)       
  }
   
   function displayAllTruckDrivers(truckDrivers){
       // Supprime tous les éléments de la table
       while (tableTruckDrivers.firstChild) {
           tableTruckDrivers.removeChild(tableTruckDrivers.firstChild);
       }
       
         truckDrivers.forEach(truckDriver => {
                      const tr = document.createElement("tr");
                         
                      const tdMatricule = document.createElement("td");
                      tdMatricule.textContent = truckDriver.TruckDriver.Matricule;
                       
                      const tdLastName = document.createElement("td");
                      tdLastName.textContent = truckDriver.TruckDriver.LastName;
                    
                      const tdFirstName = document.createElement("td");
                      tdFirstName.textContent = truckDriver.TruckDriver.FirstName;
                               
                      const tdNbrDeliveries = document.createElement("td");
                      tdNbrDeliveries.textContent = countNumberOfDeliveries(truckDriver.finishedDeliveriesDate.$values, false);
                                              
                      tr.appendChild(tdMatricule);
                      tr.appendChild(tdLastName);
                      tr.appendChild(tdFirstName);
                      tr.appendChild(tdNbrDeliveries);
                  
                      tableTruckDrivers.appendChild(tr);
                  });
   }
   
   function displayAllClients(clients){
      // Supprime tous les éléments de la table
      while (tableClients.firstChild) {
          tableClients.removeChild(tableClients.firstChild);
      }
                  
        clients.forEach(client => {
                  const tr = document.createElement("tr");
                
                  const tdNumeroClient = document.createElement("td");
                  tdNumeroClient.textContent = client.Client.ClientCompany.NumberCompany;
                
                  const tdCompanyName = document.createElement("td");
                  tdCompanyName.textContent = client.Client.ClientCompany.CompanyName;
                
                const tdNbrDeliveries = document.createElement("td");
                tdNbrDeliveries.textContent = countNumberOfDeliveries(client.finishedDeliveriesDate.$values, true);
                          
                        
                             
                  tr.appendChild(tdNumeroClient);
                  tr.appendChild(tdCompanyName);
                  tr.appendChild(tdNbrDeliveries);
                
                  tableClients.appendChild(tr);
            });
   }  
   
   
   function  countNumberOfDeliveries(delivieries, isClient){
        var  startDate;
        var endDate;
       if (isClient){
          startDate = new Date(searchStartDateClient.value);
           endDate = new Date(searchEndDateClient.value);
        }else{
           startDate = new Date(searchStartDateTruckDriver.value);
            endDate = new Date(searchEndDateTruckDriver.value);  
       }
      
      var cpt = 0;
      
      delivieries.forEach(delivey => {
          let currentDate = new Date(delivey);       
          if (currentDate > startDate && currentDate < endDate) {
                cpt++;
          }
          
      });
       
      return cpt;
    }
</script>